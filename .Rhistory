current_list = mat[i]
print(current_list)
current_list[1]
current_list[2]
current_list = mat[1]
current_list[1]
current_list[2]
current_list[3]
current_list[1][1]
current_list[1][2]
class(current_list)
summary(current_list)
print(current_list[1])
print(current_list[,1])
current_list = mat[[1]]
print(current_list)
print(current_list[1])
current_list = mat[1]
print(current_list)
current_list = mat[[1]]
print(current_list[1])
#Forming the First L
for (i in 1:1)
{
current_list = mat[[i]]
supports = current_list[1]
names    = current_list[2]
supports = supports[supports > 0.08]
names = names[supports > 0.08]
print(supports)
print(names)
}
#Forming the First L
for (i in 1:1)
{
current_list = mat[[i]]
supports = current_list[1]
names    = current_list[2]
supports = filter(lambda x: x >= 0.08, supports)
names    = filter(lambda x: x >= 0.08, supports)
print(supports)
print(names)
}
#Forming the First L
for (i in 1:2)
{
current_list = mat[[i]]
supports = current_list[1]
names    = current_list[2]
supports = filter(lambda x: x >= 0.08, supports)
names    = filter(lambda x: x >= 0.08, supports)
print(supports)
print(names)
}
#Forming the First L
for (i in 1:2)
{
}
#Forming the First L
for (i in 1:2)
{
current_list = mat[[i]]
supports = current_list[1]
names    = current_list[2]
supports = filter(lambda x: x >= 0.08, supports)
names    = filter(lambda x: x >= 0.08, supports)
}
#Forming the First L
for (i in 1:2)
{
current_list = mat[[i]]
supports <- current_list[1]
names    <- current_list[2]
supports_bool <- supports > 0.08
supports <- supports[supports_bool]
names    <- names[supports_bool]
print(supports)
print(names)
}
print(supports)
#Forming the First L
for (i in 1:2)
{
current_list = mat[[i]]
supports <- unlist(current_list[1],use.names=FALSE)
names    <- unlist(current_list[2],use.names=FALSE)
supports_bool <- supports > 0.08
supports <- supports[supports_bool]
names    <- names[supports_bool]
print(supports)
print(names)
}
#Forming the First L
for (i in 1:12)
{
current_list = mat[[i]]
supports <- unlist(current_list[1],use.names=FALSE)
names    <- unlist(current_list[2],use.names=FALSE)
supports_bool <- supports > 0.08
supports <- supports[supports_bool]
names    <- names[supports_bool]
for (i in 1:len(supports))
{
L<-c(L,list(list(supports[i],names[i])))
}
}
#Forming the First L
for (i in 1:12)
{
current_list = mat[[i]]
supports <- unlist(current_list[1],use.names=FALSE)
names    <- unlist(current_list[2],use.names=FALSE)
supports_bool <- supports > 0.08
supports <- supports[supports_bool]
names    <- names[supports_bool]
for (i in 1:length(supports))
{
L<-c(L,list(list(supports[i],names[i])))
}
}
L=c()
#Forming the First L
for (i in 1:12)
{
current_list = mat[[i]]
supports <- unlist(current_list[1],use.names=FALSE)
names    <- unlist(current_list[2],use.names=FALSE)
supports_bool <- supports > 0.08
supports <- supports[supports_bool]
names    <- names[supports_bool]
for (i in 1:length(supports))
{
L<-c(L,list(list(supports[i],names[i])))
}
}
View(L)
View(L)
length(L)
L[[i]]
L[0]
print(L[0])
print(L[1])
print(L[[1]])
print(L[1])
View(L)
s=L[[1]]
print(s[1])
print(s[2])
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element
splitted = strsplit(Name_Of_Attribute, " ")
col_index=match(names,splitted[1])
value_of_attribute=match(names,splitted[2])
print(col_index)
print(value_of_attribute)
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element
splitted = strsplit(Name_Of_Attribute, ' ')
col_index=match(names,splitted[1])
value_of_attribute=match(names,splitted[2])
print(col_index)
print(value_of_attribute)
class(Name_Of_Attribute)
prit(Name_Of_Attribute[1])
print(Name_Of_Attribute[1])
print(Name_Of_Attribute[2])
Element_to_be_compared_to = L[[j]]
Name_Of_Element_to_Be_Compared_to= Element_to_be_compared_to[2]
print(Name_Of_Attribute)
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element[1]
Element_to_be_compared_to = L[[1]]
print(Name_Of_Attribute)
Current_Selected_Element = L[[1]]
print(Current_Selected_Element)
print(Current_Selected_Element[1])
print(Current_Selected_Element[2])
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element[1]
print(Name_Of_Attribute)
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element[2]
print(Name_Of_Attribute)
clas(Name_Of_Attribute)
class(Name_Of_Attribute)
class(Name_Of_Attribute[0])
print(Name_Of_Attribute[0])
print(Name_Of_Attribute[1])
print(Name_Of_Attribute[2])
print(Name_Of_Attribute)
print(Name_Of_Attribute[1])
print(Name_Of_Attribute[[1]])
class(Name_Of_Attribute[[1]])
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element[2]
splitted = strsplit(Name_Of_Attribute[[1]], ' ')
col_index=match(names,splitted[1])
value_of_attribute=match(names,splitted[2])
print(col_index)
print(value_of_attribute)
print(splitted)
splitted[1]
splitted[[1]
]
splitted[1,1]
View(splitted)
print(splitted[2])
print(splitted[1])
print(splitted[[1]])
print(splitted[[[1]])
print(splitted[[[1]]])
print(splitted[[1]])
class(splitted)
splitted[1]
splitted[1][1]
class(splitted)
splitted[1]
splitted[1].first
splitted[[1]]
splitted[[2]]
splitted[[1][1]]
splitted[ [1][1] ]
splitted[1,]
splitted[,1]
splitted[[1]][1]
splitted[[1]][2]
col_index=match( names, splitted[[1]][1] )
value_of_attribute=match(names,splitted[[1]][2])
print(col_index)
print(value_of_attribute)
x=c('a','b')
k = match(x,'a')
k
splitted[[1]][1]
c = match(names, splitted[[1]][1] )
c
col_index=match( names, 'A' )
print(col_index)
#Forming the First L
for (i in 1:12)
{
current_list = mat[[i]]
supports <- unlist(current_list[1],use.names=FALSE)
names_of_atts    <- unlist(current_list[2],use.names=FALSE)
supports_bool <- supports > 0.08
supports <- supports[supports_bool]
names_of_atts    <- names_of_atts[supports_bool]
for (i in 1:length(supports))
{
L<-c(L,list(list(supports[i],names_of_atts[i])))
}
}
View(L)
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element[2]
splitted = strsplit(Name_Of_Attribute[[1]], ' ')
col_index=match( names, splitted[[1]][1] )
value_of_attribute=match(names,splitted[[1]][2])
print(col_index)
library(arules)
all_data <- read.delim("data.txt",header = FALSE)
project_data <- all_data[2:13]
for (i in 1:ncol(project_data))
{
project_data[,i] <- as.factor(project_data[,i])
}
min_support=0.08
transes = as(project_data,"transactions")
#will contain the supports of  all elements of each attribute
mat = c()
#att_names
names=c('A','B','C','D','E','F','G','H','I','J','K','L')
#Calculating the support
#loop on attributes
for ( i in 1:ncol(project_data))
{
attributes_values=c()
dummy_col_names=c()
attributes_values = as.vector( table(project_data[,i]))
support = attributes_values / nrow(project_data)
#TODO, check the starting if it's from 0 or 1
for ( j in 0:length(attributes_values))
{
dummy_col_names[j]= paste(names[i],j)
}
mat <-c(mat,list(list(support,dummy_col_names)))
}
L=c()
#Forming the First L
for (i in 1:12)
{
current_list = mat[[i]]
supports <- unlist(current_list[1],use.names=FALSE)
names_of_atts    <- unlist(current_list[2],use.names=FALSE)
supports_bool <- supports > 0.08
supports <- supports[supports_bool]
names_of_atts    <- names_of_atts[supports_bool]
for (i in 1:length(supports))
{
L<-c(L,list(list(supports[i],names_of_atts[i])))
}
}
count = 1
#loops on the elemetns of L
for (i in 1:length(L))
{
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element[2]
splitted = strsplit(Name_Of_Attribute[[1]], ' ')
col_index=match( names, splitted[[1]][1] )
value_of_attribute=match(names,splitted[[1]][2])
#Selects the Element of L with the elements under it
for(j in i+1:length(L))
{
Element_to_be_compared_to = L[[j]]
Name_Of_Element_to_Be_Compared_to= Element_to_be_compared_to[2]
#if the under elements has more than one element, count will increase and we will
#loop on all elements
for(q in 1:count)
{
}
}
}
L[[1]]
L[[2]]
L[[i]]
L[[i+1]]
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element[2]
splitted = strsplit(Name_Of_Attribute[[1]], ' ')
col_index=match( names, splitted[[1]][1] )
value_of_attribute=match(names,splitted[[1]][2])
col_index
value_of_attribute
i=1
Current_Selected_Element = L[[i]]
Name_Of_Attribute = Current_Selected_Element[2]
splitted = strsplit(Name_Of_Attribute[[1]], ' ')
#The index of the attribute
col_index=match( names, splitted[[1]][1] )
#the value of that attribute
value_of_attribute= splitted[[1]][2]
print(value_of_attribute)
View(project_data)
View(mat)
source('E:/BigDataProject/BigDataProject/Algorithm.R')
View(mat)
source('E:/BigDataProject/BigDataProject/Algorithm.R')
View(mat)
source('E:/BigDataProject/BigDataProject/Algorithm.R')
View(mat)
View(project_data)
table(project_data[,i])
table(project_data[,2])
table(project_data[,5])
i=5
attributes_values = as.vector( table(project_data[,i]))
names_of_table = colnames(attributes_values)
names_of_table
i=5
attributes_values = as.vector( table(project_data[,i]))
attributes_values
table = table(project_data[,i])
attributes_values = as.vector(table))
names_of_table = colnames(table)
i=5
table = table(project_data[,i])
attributes_values = as.vector(table))
names_of_table = colnames(table)
i=5
table = table(project_data[,i])
attributes_values = as.vector(table))
names_of_table = colnames(table)
table
colnames(table)
colnames(table[1])
i=5
x = table(project_data[,i])
attributes_values = as.vector(x))
names_of_table = colnames(x)
d
x
x[0]
x[1]
i=5
x = table(project_data[,i])
attributes_values = as.vector(x))
names_of_table = colnames(x)
x
x[[1]]
x[[2]]
x[[3]]
x[1]
x[1][1]
x[1][[1]
]
x[1][[2]]
x[1][[1]]
x[-1]
clear
x.dnn
x[1]
x[1].dnn
x[1].name
as(x,"dataframe")
x[]1
x[1]
x[[1]]
x[1]
x[1].__C__.name
x[1].name
x
y = as.data.frame(x)
y
y[var1]
y[1]
y[2]
y[1][1]
y[[]1]
y[[1]]
y[[1]][1]
y[[1]][2]
y[[1]][3]
i=5
x = table(project_data[,i])
df_x = as.data.frame(x)
levels_name = df_x[[1]]
levels_name
for(i in 1:3)
{}
for(i in 1:3)
{ print(i )}
i=5
x = table(project_data[,i])
df_x = as.data.frame(x)
levels_name = df_x[[1]]
attributes_values = as.vector(x))
names_of_table = colnames(x)
#support = attributes_values / nrow(project_data)
support = attributes_values
#TODO, check the starting if it's from 0 or 1
for ( j in 1:length(levels_name))
{
dummy_col_names[j]= paste(names[i],levels_name[j-1])
}
i=5
x = table(project_data[,i])
df_x = as.data.frame(x)
levels_name = df_x[[1]]
attributes_values = as.vector(x)
names_of_table = colnames(x)
#support = attributes_values / nrow(project_data)
support = attributes_values
#TODO, check the starting if it's from 0 or 1
for ( j in 1:length(levels_name))
{
dummy_col_names[j]= paste(names[i],levels_name[j-1])
}
i=5
x = table(project_data[,i])
df_x = as.data.frame(x)
levels_name = df_x[[1]]
attributes_values = as.vector(x)
#support = attributes_values / nrow(project_data)
support = attributes_values
#TODO, check the starting if it's from 0 or 1
for ( j in 1:length(levels_name))
{
dummy_col_names[j]= paste(names[i],levels_name[j-1])
}
dummy_col_names
i=5
x = table(project_data[,i])
df_x = as.data.frame(x)
levels_name = df_x[[1]]
attributes_values = as.vector(x)
#support = attributes_values / nrow(project_data)
support = attributes_values
#TODO, check the starting if it's from 0 or 1
for ( j in 1:length(levels_name))
{
dummy_col_names[j]= paste(names[i],levels_name[j])
}
dummy_col_names
dummy_col_names=c()
i=5
x = table(project_data[,i])
df_x = as.data.frame(x)
levels_name = df_x[[1]]
attributes_values = as.vector(x)
#support = attributes_values / nrow(project_data)
support = attributes_values
#TODO, check the starting if it's from 0 or 1
for ( j in 1:length(levels_name))
{
dummy_col_names[j]= paste(names[i],levels_name[j])
}
dummy_col_names
df_x = as.data.frame(x)
df_x[1]
df_x[[1]]
df_x[[2]]
attributes_values
